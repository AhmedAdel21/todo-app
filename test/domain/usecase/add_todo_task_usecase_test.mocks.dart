// Mocks generated by Mockito 5.4.0 from annotations
// in todo_app/test/domain/usecase/add_todo_task_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/app/error/failure.dart' as _i5;
import 'package:todo_app/data/requests.dart' as _i7;
import 'package:todo_app/domain/model/models.dart' as _i6;
import 'package:todo_app/domain/repository/repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initRepo() => (super.noSuchMethod(
        Invocation.method(
          #initRepo,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Authentication>> login(
          _i7.LoginRequest? loginRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginRequest],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Authentication>>.value(
                _FakeEither_0<_i5.Failure, _i6.Authentication>(
          this,
          Invocation.method(
            #login,
            [loginRequest],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Authentication>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> addTodoTask(
          _i7.TodoTaskRequestObject? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodoTask,
          [request],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #addTodoTask,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, _i6.TodoTask>>>
      getAllTodoTasks() => (super.noSuchMethod(
            Invocation.method(
              #getAllTodoTasks,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, Map<String, _i6.TodoTask>>>.value(
                _FakeEither_0<_i5.Failure, Map<String, _i6.TodoTask>>(
              this,
              Invocation.method(
                #getAllTodoTasks,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, Map<String, _i6.TodoTask>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, _i6.TodoTask>>>
      updateTodoTasks(
              Map<String, _i7.TodoTaskRequestObject>? todoTasksToUpdate) =>
          (super.noSuchMethod(
            Invocation.method(
              #updateTodoTasks,
              [todoTasksToUpdate],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, Map<String, _i6.TodoTask>>>.value(
                _FakeEither_0<_i5.Failure, Map<String, _i6.TodoTask>>(
              this,
              Invocation.method(
                #updateTodoTasks,
                [todoTasksToUpdate],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, Map<String, _i6.TodoTask>>>);
}
